DROP TABLE "POSITION" CASCADE CONSTRAINTS;
DROP TABLE "CLIENT" CASCADE CONSTRAINTS;
DROP TABLE "MUSIC_COMPANY" CASCADE CONSTRAINTS;
DROP TABLE "ARTIST" CASCADE CONSTRAINTS;
DROP TABLE "GENRE" CASCADE CONSTRAINTS;
DROP TABLE "TYPE" CASCADE CONSTRAINTS;
DROP TABLE "EMPLOYEE" CASCADE CONSTRAINTS;
DROP TABLE "PRODUCT" CASCADE CONSTRAINTS;
DROP TABLE "SALES" CASCADE CONSTRAINTS;
DROP TABLE "CART" CASCADE CONSTRAINTS;
 
DROP SEQUENCE POS_SEQ;
DROP SEQUENCE CLI_SEQ;
DROP SEQUENCE MUS_SEQ;
DROP SEQUENCE ART_SEQ;
DROP SEQUENCE GEN_SEQ;
DROP SEQUENCE TYP_SEQ;
DROP SEQUENCE EMP_SEQ;
DROP SEQUENCE PRO_SEQ;
DROP SEQUENCE SAL_SEQ;
 
/*==========CREATE SEQUENCES=============*/
CREATE SEQUENCE POS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE CLI_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE MUS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE ART_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE GEN_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE TYP_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE EMP_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE PRO_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
CREATE SEQUENCE SAL_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
 
/*==========CREATE TABLES=============*/
CREATE TABLE POSITION(
ID INTEGER PRIMARY KEY,
POSITION_NAME VARCHAR(40) NOT NULL);
 
CREATE TABLE CLIENT(
ID INTEGER PRIMARY KEY,
NAME VARCHAR(40) NOT NULL,
ADDRESS VARCHAR(255) NOT NULL,
PHONENUMBER VARCHAR(15) NOT NULL);
 
CREATE TABLE MUSIC_COMPANY(
ID INTEGER PRIMARY KEY,
NAME VARCHAR(50) NOT NULL);
 
CREATE TABLE ARTIST(
ID INTEGER PRIMARY KEY,
NAME VARCHAR(50) NOT NULL);
 
CREATE TABLE GENRE(
ID INTEGER PRIMARY KEY,
GENRE VARCHAR(50) NOT NULL);
 
CREATE TABLE TYPE(
ID INTEGER PRIMARY KEY,
TYPE VARCHAR(50) NOT NULL);
 
 
CREATE TABLE EMPLOYEE(
ID INTEGER PRIMARY KEY,
NAME VARCHAR(40) NOT NULL,
ID_POSITION INTEGER NOT NULL,
PHONENUMBER VARCHAR(15) NOT NULL,
FOREIGN KEY (ID_POSITION) REFERENCES POSITION(ID) ON DELETE CASCADE);
 
CREATE TABLE PRODUCT(
ID INTEGER PRIMARY KEY,
ID_TYPE INTEGER NOT NULL,
YEAR DATE NOT NULL,
NAME VARCHAR(50) NOT NULL,
ID_ARTIST INTEGER NOT NULL,
ID_GENRE INTEGER NOT NULL,
ID_MUSIC_COMPANY INTEGER NOT NULL,
PRICE NUMBER NOT NULL,
FOREIGN KEY (ID_TYPE) REFERENCES TYPE(ID) ON DELETE CASCADE,
FOREIGN KEY (ID_ARTIST) REFERENCES ARTIST(ID) ON DELETE CASCADE,
FOREIGN KEY (ID_GENRE) REFERENCES GENRE(ID) ON DELETE CASCADE,
FOREIGN KEY (ID_MUSIC_COMPANY) REFERENCES MUSIC_COMPANY(ID) ON DELETE CASCADE);
 
CREATE TABLE SALES(
ID INTEGER PRIMARY KEY,
ID_CLIENT INTEGER NOT NULL,
ID_EMPLOYEE INTEGER NOT NULL,
DATA DATE NOT NULL,
FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID) ON DELETE CASCADE,
FOREIGN KEY (ID_EMPLOYEE) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE);
 
CREATE TABLE CART(
ID_SALES INTEGER NOT NULL,
ID_PRODUCT INTEGER NOT NULL,
QUANTITY INTEGER NOT NULL,
FOREIGN KEY (ID_PRODUCT) REFERENCES PRODUCT(ID) ON DELETE CASCADE,
FOREIGN KEY (ID_SALES) REFERENCES SALES(ID) ON DELETE CASCADE);
 
/*==========CREATE TRIGGERS=============*/
 
/*===========
VSQKO SE STARTIRA EDNO PO EDNO, EDIN PYT
=============*/
 
CREATE OR REPLACE TRIGGER POS_TRI 
BEFORE INSERT ON POSITION FOR EACH ROW 
BEGIN
    :NEW.ID:=POS_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER ART_TRI 
BEFORE INSERT ON ARTIST FOR EACH ROW 
BEGIN
    :NEW.ID:=ART_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER CLI_TRI 
BEFORE INSERT ON CLIENT FOR EACH ROW 
BEGIN
    :NEW.ID:=CLI_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER EMP_TRI 
BEFORE INSERT ON EMPLOYEE FOR EACH ROW 
BEGIN
    :NEW.ID:=EMP_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER GEN_TRI 
BEFORE INSERT ON GENRE FOR EACH ROW 
BEGIN
    :NEW.ID:=GEN_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER MUS_TRI 
BEFORE INSERT ON MUSIC_COMPANY FOR EACH ROW 
BEGIN
    :NEW.ID:=MUS_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER PRO_TRI 
BEFORE INSERT ON PRODUCT FOR EACH ROW 
BEGIN
    :NEW.ID:=PRO_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER SAL_TRI 
BEFORE INSERT ON SALES FOR EACH ROW 
BEGIN
    :NEW.ID:=SAL_SEQ.NEXTVAL;
END;
 
CREATE OR REPLACE TRIGGER TYP_TRI 
BEFORE INSERT ON TYPE FOR EACH ROW 
BEGIN
    :NEW.ID:=TYP_SEQ.NEXTVAL;
END;
 
 
/*==========CREATE INSERTS=============*/
 
/*===========
VSQKO SE STARTIRA EDNO PO EDNO, EDIN PYT
=============*/
 
CREATE OR REPLACE PROCEDURE POS_INS 
(VAL1 POSITION.POSITION_NAME%TYPE)
 AS
  BEGIN
    INSERT INTO POSITION(POSITION_NAME)
    Values (VAL1);
  END;
 
CREATE OR REPLACE PROCEDURE ART_INS 
(VAL1 ARTIST.NAME%TYPE)
 AS
  BEGIN
    INSERT INTO ARTIST(NAME)
    Values (VAL1);
  END;
 
CREATE OR REPLACE PROCEDURE CLI_INS 
(VAL1 CLIENT.NAME%TYPE,
VAL2 CLIENT.ADDRESS%TYPE,
VAL3 CLIENT.PHONENUMBER%TYPE)
 AS
  BEGIN
    INSERT INTO CLIENT(NAME, ADDRESS, PHONENUMBER)
    Values (VAL1, VAL2, VAL3);
  END;
 
  CREATE OR REPLACE PROCEDURE MUS_INS 
(VAL1 MUSIC_COMPANY.NAME%TYPE)
 AS
  BEGIN
    INSERT INTO MUSIC_COMPANY(NAME)
    Values (VAL1);
  END;
 
  CREATE OR REPLACE PROCEDURE GEN_INS 
(VAL1 GENRE.GENRE%TYPE)
 AS
  BEGIN
    INSERT INTO GENRE(GENRE)
    Values (VAL1);
  END;
 
  CREATE OR REPLACE PROCEDURE TYP_INS 
(VAL1 TYPE.TYPE%TYPE)
 AS
  BEGIN
    INSERT INTO TYPE(TYPE)
    Values (VAL1);
  END;
 
  CREATE OR REPLACE PROCEDURE EMP_INS 
(VAL1 EMPLOYEE.NAME%TYPE,
VAL2 EMPLOYEE.ID_POSITION%TYPE,
VAL3 EMPLOYEE.PHONENUMBER%TYPE)
 AS
  BEGIN
    INSERT INTO EMPLOYEE(NAME, ID_POSITION, PHONENUMBER)
    Values (VAL1, VAL2, VAL3);
  END;
 
  CREATE OR REPLACE PROCEDURE PRO_INS 
(VAL1 PRODUCT.ID_TYPE%TYPE,
VAL2 PRODUCT.YEAR%TYPE,
VAL3 PRODUCT.NAME%TYPE,
VAL4 PRODUCT.ID_ARTIST%TYPE,
VAL5 PRODUCT.ID_GENRE%TYPE,
VAL6 PRODUCT.ID_MUSIC_COMPANY%TYPE,
VAL7 PRODUCT.PRICE%TYPE)
 AS
  BEGIN
    INSERT INTO PRODUCT(ID_TYPE, YEAR, NAME, ID_ARTIST, ID_GENRE, ID_MUSIC_COMPANY, PRICE)
    Values (VAL1, VAL2, VAL3, VAL4, VAL5, VAL6, VAL7);
  END;
 
  CREATE OR REPLACE PROCEDURE SAL_INS 
(VAL1 SALES.ID_CLIENT%TYPE,
VAL2 SALES.ID_EMPLOYEE%TYPE,
VAL3 SALES.DATA%TYPE)
 AS
  BEGIN
    INSERT INTO SALES(ID_CLIENT, ID_EMPLOYEE, DATA)
    Values (VAL1, VAL2, VAL3);
  END;
 
  /*==========CREATE UPDATE=============*/
 
  /*===========
VSQKO SE STARTIRA EDNO PO EDNO, PO EDIN PYT
=============*/
 
CREATE OR REPLACE PROCEDURE POS_UP
(VAL1 POSITION.ID%TYPE,
VAL2 POSITION.POSITION_NAME%TYPE)
 AS
  BEGIN
    UPDATE POSITION SET POSITION_NAME = VAL2
    WHERE ID = VAL1;
  END;
 
CREATE OR REPLACE PROCEDURE ART_UP
(VAL1 ARTIST.ID%TYPE,
VAL2 ARTIST.NAME%TYPE)
AS
BEGIN
UPDATE ARTIST SET NAME=VAL2
WHERE ID=VAL1;
END;
 
CREATE OR REPLACE PROCEDURE CLI_UP
(VAL1 CLIENT.ID%TYPE,
VAL2 CLIENT.NAME%TYPE,
VAL3 CLIENT.ADDRESS%TYPE,
VAL4 CLIENT.PHONENUMBER%TYPE)
AS
BEGIN
UPDATE CLIENT SET NAME=VAL2
WHERE ID=VAL1;
UPDATE CLIENT SET ADDRESS=VAL3
WHERE ID=VAL1;
UPDATE CLIENT SET PHONENUMBER=VAL4
WHERE ID=VAL1;
END;
 
CREATE OR REPLACE PROCEDURE EMP_UP
(VAL1 EMPLOYEE.ID%TYPE,
VAL2 EMPLOYEE.NAME%TYPE,
VAL3 EMPLOYEE.ID_POSITION%TYPE,
VAL4 EMPLOYEE.PHONENUMBER%TYPE)
AS
BEGIN
UPDATE EMPLOYEE SET NAME=VAL2
WHERE ID=VAL1;
UPDATE EMPLOYEE SET ID_POSITION=VAL3
WHERE ID=VAL1;
UPDATE EMPLOYEE SET PHONENUMBER=VAL4
WHERE ID=VAL1;
END;
 
CREATE OR REPLACE PROCEDURE GEN_UP
(VAL1 GENRE.ID%TYPE,
VAL2 GENRE.GENRE%TYPE)
AS
BEGIN
UPDATE GENRE SET GENRE=VAL2
WHERE ID=VAL1;
END;
 
CREATE OR REPLACE PROCEDURE MUS_UP
(VAL1 MUSIC_COMPANY.ID%TYPE,
VAL2 MUSIC_COMPANY.NAME%TYPE)
AS
BEGIN
UPDATE MUSIC_COMPANY SET NAME=VAL2
WHERE ID=VAL1;
END;
 
CREATE OR REPLACE PROCEDURE PRO_UP
(VAL1 PRODUCT.ID%TYPE,
VAL2 PRODUCT.ID_TYPE%TYPE,
VAL3 PRODUCT.YEAR%TYPE,
VAL4 PRODUCT.NAME%TYPE,
VAL5 PRODUCT.ID_ARTIST%TYPE,
VAL6 PRODUCT.ID_GENRE%TYPE,
VAL7 PRODUCT.ID_MUSIC_COMPANY%TYPE,
VAL8 PRODUCT.PRICE%TYPE)
AS
BEGIN
UPDATE PRODUCT SET ID_TYPE=VAL2
WHERE ID=VAL1;
UPDATE PRODUCT SET YEAR=VAL3
WHERE ID=VAL1;
UPDATE PRODUCT SET NAME=VAL4
WHERE ID=VAL1;
UPDATE PRODUCT SET ID_ARTIST=VAL5
WHERE ID=VAL1;
UPDATE PRODUCT SET ID_GENRE=VAL6
WHERE ID=VAL1;
UPDATE PRODUCT SET ID_MUSIC_COMPANY=VAL7
WHERE ID=VAL1;
UPDATE PRODUCT SET PRICE=VAL8
WHERE ID=VAL1;
END;
 
CREATE OR REPLACE PROCEDURE SAL_UP
(VAL1 SALES.ID%TYPE,
VAL2 SALES.ID_CLIENT%TYPE,
VAL3 SALES.ID_EMPLOYEE%TYPE,
VAL4 SALES.DATA%TYPE)
AS
BEGIN
UPDATE SALES SET ID_CLIENT=VAL2
WHERE ID=VAL1;
UPDATE SALES SET ID_EMPLOYEE=VAL3
WHERE ID=VAL1;
UPDATE SALES SET DATA=VAL4
WHERE ID=VAL1;
END;
 
CREATE OR REPLACE PROCEDURE TYP_UP
(VAL1 TYPE.ID%TYPE,
VAL2 TYPE.TYPE%TYPE)
AS
BEGIN
UPDATE TYPE SET TYPE=VAL2
WHERE ID=VAL1;
END;
 
/*==========INSERT VALUES=============*/
 
/*===========
VSQKO SE STARTIRA EDNO PO EDNO
=============*/
BEGIN 
POS_INS('CASHIER'); 
END;
BEGIN 
POS_INS('SELLER'); 
END;
BEGIN 
POS_INS('CLEANER'); 
END;
BEGIN 
POS_INS('SECURITY'); 
END;
BEGIN 
POS_INS('MANAGER'); 
END;
BEGIN 
POS_INS('CEO'); 
END;
 
 
BEGIN
ART_INS('Ariana Grande');
END;
BEGIN 
ART_INS('Luke Combs'); 
END;
BEGIN 
ART_INS('Post Malone'); 
END;
BEGIN 
ART_INS('The Weeknd'); 
END;
BEGIN 
ART_INS('BTS'); 
END;
/*
BEGIN 
ART_INS('Pop Smoke'); 
END;
BEGIN 
ART_INS('Harry Styles'); 
END;
BEGIN 
ART_INS('Juice WRLD'); 
END;
BEGIN 
ART_INS('Sam Smith'); 
END;
BEGIN 
ART_INS('Grateful Dead'); 
END;
*/
 
 
BEGIN 
CLI_INS('Daniel Kostov', 'Varna', '0887034123'); 
END;
BEGIN 
CLI_INS('Kiril Stoyanov', 'Troyan', '0877405827'); 
END;
BEGIN 
CLI_INS('Ivan Ivanov', 'Burgas', '0876583994'); 
END;
BEGIN 
CLI_INS('Kalina Boneva', 'Varna', '0876712543'); 
END;
BEGIN 
CLI_INS('Ivan Hristov', 'Sofiya', '0887333542'); 
END;
BEGIN 
CLI_INS('Georgi Ganchev', 'Varna', '0899545562'); 
END;
BEGIN 
CLI_INS('Tsvetelin Stoyanov', 'Burgas', '0876444344'); 
END;
BEGIN 
CLI_INS('Viktor Nedev', 'Varna', '0899262839'); 
END;
BEGIN 
CLI_INS('Mariya Radeva', 'Burgas', '0879102938'); 
END;
BEGIN 
CLI_INS('Adriana Stamenova', 'Sofiya', '0899133583'); 
END;
 
 
BEGIN
MUS_INS('BIG HIT ENTERTAINMENT');
END;
BEGIN
MUS_INS('BRAVADO');
END;
BEGIN
MUS_INS('SONGCLIP');
END;
BEGIN
MUS_INS('BMG');
END;
BEGIN
MUS_INS('88RISING');
END;
/*
BEGIN
MUS_INS('GOLD RUSH VINYL');
END;
BEGIN
MUS_INS('DOLBY');
END;
BEGIN
MUS_INS('NVAK FOUNDA­TION');
END;
BEGIN
MUS_INS('GENER8TOR');
END;
BEGIN
MUS_INS('PANDORA');
END;
*/
 
 
BEGIN
GEN_INS('Pop');
END;
BEGIN
GEN_INS('Hip-hop');
END;
BEGIN
GEN_INS('Rap');
END;
BEGIN
GEN_INS('Rock');
END;
BEGIN
GEN_INS('K-Pop');
END;
/*
BEGIN
GEN_INS('Electronic music');
END;
BEGIN
GEN_INS('Latin music');
END;
BEGIN
GEN_INS('Classical music');
END;
BEGIN
GEN_INS('Country');
END;
BEGIN
GEN_INS('Metal');
END;
*/
 
 
BEGIN
TYP_INS('DVD');
END;
BEGIN
TYP_INS('CD');
END;
BEGIN
TYP_INS('BLUE-RAY');
END;
 
 
BEGIN
EMP_INS('David Ivanov', 1, '0898884224');
END;
BEGIN
EMP_INS('Pavel Boichev', 1, '0898994324');
END;
BEGIN
EMP_INS('Avgustina Kosova', 1, '0877499872');
END;
BEGIN
EMP_INS('Ivan Petrov', 2, '0978775734');
END;
BEGIN
EMP_INS('Lili Zlateva', 2, '0988545362');
END;
BEGIN
EMP_INS('Petyr Panov', 3, '0987005324');
END;
BEGIN
EMP_INS('Filip Toshev', 3, '0878371936');
END;
BEGIN
EMP_INS('Jordan Minchev', 4, '0887564113');
END;
BEGIN
EMP_INS('Hristina Pavlova', 5, '0887911458');
END;
BEGIN
EMP_INS('Kristiyan Kiriakov', 6, '0899565656');
END;
 
 
BEGIN
PRO_INS(1, '10-10-20', 'Mood', 1, 5, 1, 10.22);
END;
BEGIN
PRO_INS(2, '11-11-19', 'Positions', 2, 4, 2, 10.55);
END;
BEGIN
PRO_INS(3, '12-12-18', 'Laugh Now Cry Later', 3, 3, 3, 9.67);
END;
BEGIN
PRO_INS(3, '1-12-19', 'Blinding Lights', 4, 2, 3, 12.7);
END;
BEGIN
PRO_INS(2, '2-12-18', 'I Hope', 5, 1, 3, 12.67);
END;
BEGIN
PRO_INS(1, '14-12-18', 'Savage Love(Laxed - Siren Beat)', 4, 3, 2, 11.55);
END;
BEGIN
PRO_INS(3, '1-12-19', 'Lemonade', 3, 4, 3, 9.7);
END;
BEGIN
PRO_INS(2, '2-12-18', '34+35', 2, 3, 1, 10.67);
END;
BEGIN
PRO_INS(1, '14-12-18', 'Dakiti', 1, 2, 5, 10.55);
END;
BEGIN
PRO_INS(1, '15-12-18', 'Wap', 5, 1, 4, 10.99);
END;
 
 
BEGIN
SAL_INS(1, 3, '2-4-20');
END;
BEGIN
SAL_INS(2, 2, '1-3-20');
END;
BEGIN
SAL_INS(3, 1, '6-5-20');
END;
BEGIN
SAL_INS(4, 2, '2-6-20');
END;
BEGIN
SAL_INS(5, 3, '8-5-20');
END;
BEGIN
SAL_INS(6, 2, '1-3-20');
END;
BEGIN
SAL_INS(7, 1, '5-5-20');
END;
BEGIN
SAL_INS(8, 2, '5-6-20');
END;
BEGIN
SAL_INS(9, 3, '6-5-20');
END;
BEGIN
SAL_INS(10, 2, '5-3-20');
END;
 
 
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (1, 3, 1);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (2, 2, 2);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (3, 1, 3);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (4, 6, 2);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (5, 5, 1);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (6, 4, 2);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (7, 10, 2);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (8, 9, 3);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (9, 8, 2);
INSERT INTO CART(ID_SALES, ID_PRODUCT, QUANTITY) VALUES (10, 7, 1);
 
/*==========UPDATE VALUES=============*/
 
/*-> SMQNA NA MESTATA NA DAVID I PETAR*/
 
BEGIN
EMP_UP(3, 'David Ivanov', 3, '0898884224');
END;
 
BEGIN
EMP_UP(1, 'Petyr Panov', 1, '0987005324');
END;
 
/*===============ORDERS================*/

 SELECT t.type, a.name, g.genre, p.year, m.name 
 FROM product p 
 JOIN type t ON t.id = p.id_type 
 JOIN artist a ON a.id=p.id_artist 
 JOIN genre g ON g.id=p.id_genre 
 JOIN music_company m ON m.id=p.id_music_company 
 WHERE type = 'DVD' OR type = 'CD';

/*=============SPRAVKA 1=============*/

SELECT e.id, e.name, s.data 
FROM employee e 
JOIN sales s ON e.id = s.id_employee 
ORDER BY s.data;

/*=============SPRAVKA 2=======================*/
  
 SELECT * 
 FROM (
    SELECT p.name, c.quantity 
    FROM client cl 
    JOIN sales s ON cl.id = s.id_client 
    JOIN cart c ON s.id = c.id_sales 
    JOIN product p ON p.id = c.id_product 
    ORDER BY s.data DESC) 
 WHERE ROWNUM <=5;
  
/*=============SPRAVKA 3=====================*/
 
 SELECT p.name, c.quantity 
 FROM client cl 
 JOIN sales s ON cl.id = s.id_client 
 JOIN cart c ON s.id = c.id_sales 
 JOIN product p ON p.id = c.id_product 
 JOIN type t ON t.id = p.id_type 
 WHERE cl.name = 'Ivan Hristov' 
 ORDER BY t.type, p.year;
 
/*============SPRAVKA 4======================*/

SELECT C.NAME, S.DATA 
FROM SALES S 
JOIN CLIENT C ON C.ID = S.ID_CLIENT 
WHERE S.DATA >= TO_DATE('1/1/2006', 'MM/DD/YYYY') AND s.data <= TO_DATE('12/12/2006', 'MM/DD/YYYY') 
ORDER BY S.DATA;

/*========WITH CONTROLLERS=======*/
/* Търсене на CD, DVD по вид, изпълнител, жанр, година, музикална компания */

create or replace PROCEDURE SEARCH_PRODUCT(TYPE_P VARCHAR2, ARTIST_P VARCHAR2, GENRE_P VARCHAR2, YEAR_P VARCHAR2, MUSIC_COMPANY_P VARCHAR2) 
IS   
CURSOR SEARCH_CURSOR 
IS
    SELECT C.NAME, S.DATA, T.TYPE, P.NAME, A.NAME, G.GENRE, M.NAME, CT.QUANTITY, P.PRICE 
    FROM CART CT 
    JOIN SALES S ON S.ID=CT.ID_SALES 
    JOIN CLIENT C ON C.ID = S.ID_CLIENT 
    JOIN PRODUCT P ON P.ID=CT.ID_PRODUCT 
    JOIN TYPE T ON T.ID = P.ID_TYPE 
    JOIN ARTIST A ON A.ID=P.ID_ARTIST 
    JOIN GENRE G ON G.ID=P.ID_GENRE 
    JOIN MUSIC_COMPANY M ON M.ID=P.ID_MUSIC_COMPANY 
    WHERE T.type = TYPE_P 
    OR a.name = ARTIST_P 
    OR G.GENRE = GENRE_P 
    OR p.YEAR = YEAR_P 
    OR m.name = MUSIC_COMPANY_P;

    CL_NAME client.name%TYPE;
    SALE_DATA DATE;
    T_TYPE type.type%TYPE;
    PROD_NAME product.name%TYPE;
    ARTIST_NAME artist.name%TYPE;
    G_GENRE genre.genre%TYPE;
    COMPANY_NAME music_company.name%TYPE;
    CART_QUAN NUMBER;
    PROD_PRICE NUMBER;
    
    BEGIN
    OPEN SEARCH_CURSOR;
    LOOP FETCH SEARCH_CURSOR INTO CL_NAME, SALE_DATA, T_TYPE, PROD_NAME, ARTIST_NAME, G_GENRE, COMPANY_NAME, CART_QUAN, PROD_PRICE;
    EXIT WHEN SEARCH_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(
     'CLIENT NAME:' || CL_NAME || 
    ' SALE_DATE:' || SALE_DATA ||
    ' TYPE:' || T_TYPE ||
    ' PRODUCT NAME:' || PROD_NAME ||
    ' ARTIST NAME:' || ARTIST_NAME ||
    ' GANRE:' || G_GENRE ||
    ' MUSIC COMPANY NAME:' || COMPANY_NAME ||
    ' QUANTITY:' || CART_QUAN ||
    ' PRICE:' || PROD_PRICE || '$');
    END LOOP;
  CLOSE SEARCH_CURSOR;
END SEARCH_PRODUCT;
EXEC SEARCH_PRODUCT('&Type' ,'&Artist_Name' ,'&Genre' ,'&Year' ,'&Music_Company');

/*Справка за Продажби на служител, подредени по дата*/

create or replace PROCEDURE EMPLOYEE_SALES(EM_NAME VARCHAR2) 
IS   
CURSOR EM_SALES_CURSOR 
IS
    SELECT cl.name, e.name, s.data, t.type, p.name, c.quantity, p.price
    FROM employee e 
    JOIN sales s ON e.id = s.id_employee 
    JOIN client cl ON cl.id=s.id_client JOIN cart c ON c.id_sales = s.id 
    JOIN product p ON p.id = c.id_product 
    JOIN type t ON t.id = p.id_type 
    WHERE e.name = EM_NAME ORDER BY s.data;

    CL_NAME client.name%TYPE;
    EM_NAME_P employee.name%TYPE;
    SALE_DATA DATE;
    T_TYPE type.type%TYPE;
    PROD_NAME product.name%TYPE;
    CART_QUAN NUMBER;
    PROD_PRICE NUMBER;

    BEGIN
    OPEN EM_SALES_CURSOR;
    LOOP FETCH EM_SALES_CURSOR INTO CL_NAME, EM_NAME_P, SALE_DATA, T_TYPE, PROD_NAME, CART_QUAN, PROD_PRICE;
    EXIT WHEN EM_SALES_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(
     'CLIENT NAME:' || CL_NAME || 
    ' EMPLOYEE NAME:' || EM_NAME_P ||
    ' SALE_DATE:' || SALE_DATA ||
    ' TYPE:' || T_TYPE ||
    ' PRODUCT NAME:' || PROD_NAME ||
    ' QUANTITY:' || CART_QUAN ||
    ' PRICE:' || PROD_PRICE || '$');
    END LOOP;
  CLOSE EM_SALES_CURSOR;
END EMPLOYEE_SALES;
EXEC EMPLOYEE_SALES('&Employee_name');

/*Справка за Последните 5 продажби на стоки, издавани в последната година, подредени по служител*/

create or replace PROCEDURE LAST_SALES 
IS   
CURSOR LAST_SALES_CURSOR 
IS
    SELECT * FROM 
    (SELECT t.type, p.name, g.genre, c.quantity, p.price
    FROM client cl 
    JOIN sales s ON cl.id = s.id_client 
    JOIN cart c ON s.id = c.id_sales 
    JOIN employee e ON e.id = s.id_employee 
    JOIN product p ON p.id = c.id_product 
    JOIN type t ON t.id = p.id_type 
    JOIN genre g ON g.id = p.id_genre 
    WHERE (s.data BETWEEN TRUNC(sysdate, 'Year') AND sysdate) 
    ORDER BY s.data, e.name DESC) 
    WHERE ROWNUM <=5;

    T_TYPE type.type%TYPE;
    PROD_NAME product.name%TYPE;
    G_GANRE genre.genre%TYPE;
    CART_QUAN NUMBER;
    PROD_PRICE NUMBER;
    
    BEGIN
    OPEN LAST_SALES_CURSOR;
    LOOP FETCH LAST_SALES_CURSOR INTO T_TYPE, PROD_NAME, G_GANRE, CART_QUAN, PROD_PRICE;
    EXIT WHEN LAST_SALES_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(
    'TYPE:' || T_TYPE ||
    ' PRODUCT NAME:' || PROD_NAME ||
    ' GANRE:' || G_GANRE ||
    ' QUANTITY:' || CART_QUAN ||
    ' PRICE:' || PROD_PRICE || '$');
    END LOOP;
  CLOSE LAST_SALES_CURSOR;
END LAST_SALES;
EXEC LAST_SALES;  

/*Справка за Закупени стоки от клиент, подредени по вид и дата*/
 
create or replace PROCEDURE CLIENT_PRODUCT(CLIENT_NAME VARCHAR2) 
IS   
CURSOR CLIENT_PRODUCT_CURSOR 
IS
    SELECT cl.name, t.type, p.name, a.name, g.genre, m.name, c.quantity, p.price 
    FROM client cl 
    JOIN sales s ON cl.id = s.id_client 
    JOIN cart c ON s.id = c.id_sales 
    JOIN product p ON p.id = c.id_product 
    JOIN type t ON t.id = p.id_type 
    JOIN artist a ON a.id = p.id_artist 
    JOIN genre g ON g.id = p.id_genre 
    JOIN music_company m ON m.id=p.id_music_company 
    WHERE cl.name = CLIENT_NAME
    ORDER BY t.type, p.year;
    
    CL_NAME client.name%TYPE;
    T_TYPE type.type%TYPE;
    PROD_NAME product.name%TYPE;
    ARTIST_NAME artist.name%TYPE;
    G_GANRE genre.genre%TYPE;
    COMPANY_NAME music_company.name%TYPE;
    CART_QUAN NUMBER;
    PROD_PRICE NUMBER;
    
    BEGIN
    OPEN CLIENT_PRODUCT_CURSOR;
    LOOP FETCH CLIENT_PRODUCT_CURSOR INTO CL_NAME, T_TYPE, PROD_NAME, ARTIST_NAME, G_GANRE, COMPANY_NAME, CART_QUAN, PROD_PRICE;
    EXIT WHEN CLIENT_PRODUCT_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(
     'CLIENT NAME:' || CL_NAME || 
    ' TYPE:' || T_TYPE ||
    ' PRODUCT NAME:' || PROD_NAME ||
    ' ARTIST NAME:' || ARTIST_NAME ||
    ' GANRE:' || G_GANRE ||
    ' MUSIC COMPANY NAME:' || COMPANY_NAME ||
    ' QUANTITY:' || CART_QUAN ||
    ' PRICE:' || PROD_PRICE || '$');
    END LOOP;
  CLOSE CLIENT_PRODUCT_CURSOR;
END CLIENT_PRODUCT;
EXEC CLIENT_PRODUCT('&Client_Name'); 

/*Справка за Закупени стоки за период, подредени по клиенти и дати*/

create or replace PROCEDURE PERIODE_SALES 
IS   
CURSOR PERIODE_SALES_CURSOR 
IS
    SELECT C.NAME, S.DATA, T.TYPE, P.NAME, A.NAME, G.GENRE, M.NAME, CT.QUANTITY, p.price 
    FROM CART CT 
    JOIN SALES S ON S.ID=CT.ID_SALES 
    JOIN CLIENT C ON C.ID = S.ID_CLIENT 
    JOIN PRODUCT P ON P.ID=CT.ID_PRODUCT 
    JOIN TYPE T ON T.ID = P.ID_TYPE 
    JOIN ARTIST A ON A.ID=P.ID_ARTIST 
    JOIN GENRE G ON G.ID=P.ID_GENRE 
    JOIN MUSIC_COMPANY M ON M.ID=P.ID_MUSIC_COMPANY 
    WHERE S.DATA >= TO_DATE('1/1/2020', 'DD/MM/YYYY') 
    AND s.data <= TO_DATE('30/12/2020', 'DD/MM/YYYY') 
    ORDER BY C.NAME, S.DATA;

    CL_NAME client.name%TYPE;
    SALE_DATA DATE;
    T_TYPE type.type%TYPE;
    PROD_NAME product.name%TYPE;
    ARTIST_NAME artist.name%TYPE;
    G_GANRE genre.genre%TYPE;
    COMPANY_NAME music_company.name%TYPE;
    CART_QUAN NUMBER;
    PROD_PRICE NUMBER;
    
    BEGIN
    OPEN PERIODE_SALES_CURSOR;
    LOOP FETCH PERIODE_SALES_CURSOR INTO CL_NAME, SALE_DATA, T_TYPE, PROD_NAME, ARTIST_NAME, G_GANRE, COMPANY_NAME, CART_QUAN, PROD_PRICE;
    EXIT WHEN PERIODE_SALES_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(
     'CLIENT NAME:' || CL_NAME || 
    ' SALE_DATE:' || SALE_DATA ||
    ' TYPE:' || T_TYPE ||
    ' PRODUCT NAME:' || PROD_NAME ||
    ' ARTIST NAME:' || ARTIST_NAME ||
    ' GANRE:' || G_GANRE ||
    ' MUSIC COMPANY NAME:' || COMPANY_NAME ||
    ' QUANTITY:' || CART_QUAN ||
    ' PRICE:' || PROD_PRICE || '$');
    END LOOP;
  CLOSE PERIODE_SALES_CURSOR;
END PERIODE_SALES;
